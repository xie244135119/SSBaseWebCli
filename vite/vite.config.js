import { defineConfig } from 'vite';
// const { defineConfig } = require('vite');

export default defineConfig({
  /**
   * @default process.cwd()
   */
  // root?: string;
  /**
   * @default '/'
   */
  base: '/',
  /**
   * @default 'public'
   */
  publicDir: 'public',
  // /**
  //  * Directory to save cache files. Files in this directory are pre-bundled
  //  * deps or some other cache files that generated by vite, which can improve
  //  * the performance. You can use `--force` flag or manually delete the directory
  //  * to regenerate the cache files. The value can be either an absolute file
  //  * system path or a path relative to project root.
  //  * Default to `.vite` when no `package.json` is detected.
  //  * @default 'node_modules/.vite'
  //  */
  // cacheDir?: string,
  /**
   * Explicitly set a mode to run in. This will override the default mode for
   * each command, and can be overridden by the command line --mode option.
   */
  mode: 'development',
  /**
   * Define global variable replacements.
   * Entries will be defined on `window` during dev and replaced during build.
   */
  // define?: Record<string, any>;
  /**
   * Array of vite plugins to use.
   */
  // plugins?: PluginOption[],
  /**
   * Configure resolver
   */
  resolve: {
    alias: {
      '@': 'src/'
    },
    mainFields: ['module', 'jsnext:main', 'jsnext'],
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.json', '.mjs']
  },
  /**
   * CSS related options (preprocessors and CSS modules)
   */
  css: {
    //
    module: true,
    // source map
    devSourcemap: true
  },

  /**
   * JSON loading options
   */
  json: {
    namedExports: true,
    stringify: false
  },
  /**
   * Transform options to pass to esbuild.
   * Or set to `false` to disable esbuild.
   */
  esbuild: {
    jsxInject: "import React from 'react'"
  },
  //
  clearScreen: false,
  // mpa 单 spa：多 custom: 自定义
  appType: 'mpa',
  /**
   * Specify additional picomatch patterns to be treated as static assets.
   */
  //  assetsInclude?: new RegExp(`\\.(` + ['png', 'jpg'].join('|') + `)(\\?.*)?$`),
  /**
   * Server specific options, e.g. host, port, https...
   */
  server: {
    host: true,
    port: 8000,
    strictPort: false,
    open: true,
    proxy: {
      // '/api': {
      //   target: 'http://192.168.1.220:8080/',
      //   pathRewrite: { '/api': '' }
      // }
    },
    cors: true,
    headers: {},
    hmr: true,
    // watch: {},
    middlewareMode: true
  },
  /**
   * Log level.
   * @default 'info'
   */
  logLevel: 'info',
  /**
   * Build specific options
   */
  build: {
    target: 'modules',
    modulePreload: {
      polyfill: true
    },
    outDir: 'dist',
    assetsDir: 'assets',
    assetsInlineLimit: 10 * 1024,
    cssCodeSplit: true,
    sourcemap: false,
    // rollup options config
    // rollupOptions: {

    // }
    minify: 'esbuild',
    write: true,
    emptyOutDir: true,
    // dev 启用
    reportCompressedSize: false,
    // chunk size
    chunkSizeWarningLimit: 500,
    //
    watch: null
  }
  /**
   * Preview specific options, e.g. host, port, https...
   */
  // preview?: PreviewOptions;
  /**
   * Dep optimization options
   */
  // optimizeDeps?: DepOptimizationOptions;
  /**
   * SSR specific options
   */
  // ssr?: SSROptions;
  /**
   * Experimental features
   *
   * Features under this field could change in the future and might NOT follow semver.
   * Please be careful and always pin Vite's version when using them.
   * @experimental
   */
  // experimental?: ExperimentalOptions;
});
